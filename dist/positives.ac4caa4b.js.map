{"version":3,"sources":["js/positives.js"],"names":["DATA_SOURCE","DATAFILES","EPIDEMICSTATUS","PCR","DECEASEDPEOPLECOUNT","BYAGE","BYHEALTHZONE","BYMUNICIPALITY","BYHOSPITAL","getJSON","url","callback","xhr","XMLHttpRequest","open","responseType","onload","status","response","send","updated","jsonData","lastdate","Date","formattedlastdate","getDate","getMonth","getFullYear","window","err","dataJson","alert","document","getElementById","innerHTML","byDate","length","date","google","charts","load","setOnLoadCallback","drawChart","data","visualization","DataTable","location","href","indexOf","addColumn","options","chart","title","subtitle","hAxis","format","width","height","element","addRow","positiveCount","Line","draw","convertOptions","aggregatedIncidence","aggregatedIncidenceAR","aggregatedIncidenceBIZ","aggregatedIncidenceGI","drawTable","monthYearFormatter","DateFormat","pattern","table","Table","showRowNumber","sortColumn","sortAscending","positivesPcrRate","previousPositives","previousPcr","i","push","positives","pcrPositiveCount","pcr","pcrTestCount","rate"],"mappings":"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","file":"positives.ac4caa4b.js","sourceRoot":"..\\src\\covid19","sourcesContent":["//import { DATAFILES } from './config';\n//const DATAFILES = require('./config');\nconst DATA_SOURCE = 'https://opendata.euskadi.eus/contenidos/ds_informes_estudios/covid_19_2020/opendata/generated/';\nDATAFILES = {\n    EPIDEMICSTATUS: `${DATA_SOURCE}/covid19-epidemic-status.json`,\n    PCR: `${DATA_SOURCE}/covid19-pcr.json`,\n    DECEASEDPEOPLECOUNT: `${DATA_SOURCE}/covid19-deceasedPeopleCount.json`,\n    BYAGE: `${DATA_SOURCE}/covid19-byage.json`,\n    BYHEALTHZONE: `${DATA_SOURCE}/covid19-byhealthzone.json`,\n    BYMUNICIPALITY: `${DATA_SOURCE}/covid19-bymunicipality.json`,\n    BYHOSPITAL: `${DATA_SOURCE}/covid19-byhospital.json`,\n};\n//import { getJSON } from './getData.js';\n//const getJSON = require('./getData');\nvar getJSON = function (url, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('get', url, true);\n    xhr.responseType = 'json';\n    xhr.onload = function () {\n        var status = xhr.status;\n        if (status == 200) {\n            callback(null, xhr.response);\n        } else {\n            callback(status);\n        }\n    };\n    xhr.send();\n};\nfunction updated(jsonData) {\n    let lastdate = new Date(jsonData);\n    let formattedlastdate = lastdate.getDate() + \"/\" + (lastdate.getMonth() + 1) + \"/\" + lastdate.getFullYear();\n    return formattedlastdate;\n}\n\nwindow.onload = function () {\n    getJSON(DATAFILES.PCR, function (err, dataJson) {\n        if (err != null) {\n            alert('Something went wrong: ' + err);\n        } else {\n            document.getElementById(\"fechaActualizacion\").innerHTML += updated(dataJson.byDate[dataJson.byDate.length - 1].date);\n\n            google.charts.load('current', { 'packages': ['line'] });\n            google.charts.setOnLoadCallback(drawChart);\n\n            function drawChart() {\n                var data = new google.visualization.DataTable();\n                if (window.location.href.indexOf(\"/eu/\") > -1) {\n                    data.addColumn('date', 'Data');\n                    data.addColumn('number', 'Euskadi: Kasu positiboen kopurua');\n                    var options = {\n                        chart: {\n                            title: 'Kasu positibo berriak Euskadin',\n                            subtitle: 'Egindako testetan izandako kasu positibo berriak termino absolutuetan Euskadin.',\n                        },\n                        hAxis: { format: 'yy/M/d' },\n                        width: 900,\n                        height: 500\n                    };\n                } else {\n                    data.addColumn('date', 'Fecha');\n                    data.addColumn('number', 'Euskadi: Número de casos positivos');\n                    var options = {\n                        chart: {\n                            title: 'Casos positivos nuevos en Euskadi',\n                            subtitle: 'Casos positivos nuevos en términos absolutos de test realizados en la Comunidad Autónoma de Euskadi.',\n                        },\n                        hAxis: { format: 'd/M/yy' },\n                        width: 900,\n                        height: 500\n                    };\n                }\n                for (let element of dataJson.byDate) {\n                    data.addRow([new Date(element.date), element.positiveCount]);\n                }\n\n                var chart = new google.charts.Line(document.getElementById('linechart_material'));\n                chart.draw(data, google.charts.Line.convertOptions(options));\n\n                var data = new google.visualization.DataTable();\n                if (window.location.href.indexOf(\"/eu/\") > -1) {\n                    data.addColumn('date', 'Data');\n                    data.addColumn('number', 'Euskadi: 14 egunetan metatutako intzidentzia 100.000 biztanleko (testak guztira)');\n                    data.addColumn('number', 'Araba: 14 egunetan metatutako intzidentzia 100.000 biztanleko (testak guztira)');\n                    data.addColumn('number', 'Bizkaia: 14 egunetan metatutako intzidentzia 100.000 biztanleko (testak guztira)');\n                    data.addColumn('number', 'Gipuzkoa: 14 egunetan metatutako intzidentzia 100.000 biztanleko (testak guztira)');\n                    var options = {\n                        chart: {\n                            title: 'Kasu positiboak: 100.000 biztanleko intzidentzia',\n                            subtitle: '14 egunetan metatutako intzidentzia 100.000 biztanleko (testak guztira)',\n                        },\n                        hAxis: { format: 'yy/M/d' },\n                        width: 900,\n                        height: 500\n                    };\n                } else {\n                    data.addColumn('date', 'Fecha');\n                    data.addColumn('number', 'Euskadi: Incidencia acumulada 14 días x 100.000 hab. (test totales)');\n                    data.addColumn('number', 'Araba: Incidencia acumulada 14 días x 100.000 hab. (test totales)');\n                    data.addColumn('number', 'Bizkaia: Incidencia acumulada 14 días x 100.000 hab. (test totales)');\n                    data.addColumn('number', 'Gipuzkoa: Incidencia acumulada 14 días x 100.000 hab. (test totales)');\n                    var options = {\n                        chart: {\n                            title: 'Casos positivos: incidencia x 100.000 hab.',\n                            subtitle: 'Incidencia acumulada 14 días x 100.000 hab. (test totales)',\n                        },\n                        hAxis: { format: 'd/M/yy' },\n                        width: 900,\n                        height: 500\n                    };\n                }\n\n                for (let element of dataJson.byDate) {\n                    data.addRow([new Date(element.date), element.aggregatedIncidence, element.aggregatedIncidenceAR, element.aggregatedIncidenceBIZ, element.aggregatedIncidenceGI]);\n                }\n                var chart = new google.charts.Line(document.getElementById('linechart_material0'));\n                chart.draw(data, google.charts.Line.convertOptions(options));\n            }\n\n            google.charts.load('current', { 'packages': ['table'] });\n            google.charts.setOnLoadCallback(drawTable);\n            function drawTable() {\n                var data = new google.visualization.DataTable();\n                if (window.location.href.indexOf(\"/eu/\") > -1) {\n                    data.addColumn('date', 'Data');\n                    data.addColumn('number', 'Positiboak testetan');\n                    data.addColumn('number', 'Euskadi: positiboak 100.000 biztanleko');\n                    data.addColumn('number', 'Araba');\n                    data.addColumn('number', 'Bizkaia');\n                    data.addColumn('number', 'Gizpuzkoa');\n                    var monthYearFormatter = new google.visualization.DateFormat({\n                        pattern: \"yyy-MM-dd\"\n                    });\n                } else {\n                    data.addColumn('date', 'Fecha');\n                    data.addColumn('number', 'Positivos test');\n                    data.addColumn('number', 'Euskadi: Positivos x 100.000 hab.');\n                    data.addColumn('number', 'Araba');\n                    data.addColumn('number', 'Bizkaia');\n                    data.addColumn('number', 'Gizpuzkoa');\n                    var monthYearFormatter = new google.visualization.DateFormat({\n                        pattern: \"dd-MM-yyy\"\n                    });\n                }\n\n                for (let element of dataJson.byDate) {\n                    data.addRow([new Date(element.date), element.positiveCount, element.aggregatedIncidence, element.aggregatedIncidenceAR, element.aggregatedIncidenceBIZ, element.aggregatedIncidenceGI]);\n                }\n                monthYearFormatter.format(data, 0);\n                var table = new google.visualization.Table(document.getElementById('table_div'));\n                table.draw(data, { showRowNumber: true, sortColumn: 0, sortAscending: false, width: '100%', height: '100%' });\n\n            }\n        }\n    });\n    getJSON(DATAFILES.EPIDEMICSTATUS, function (err, dataJson) {\n        if (err != null) {\n            alert('Something went wrong: ' + err);\n        } else {\n\n\n            google.charts.load('current', { 'packages': ['line'] });\n            google.charts.setOnLoadCallback(drawChart);\n\n            function drawChart() {\n                var data = new google.visualization.DataTable();\n                if (window.location.href.indexOf(\"/eu/\") > -1) {\n                    data.addColumn('date', 'Data');\n                    data.addColumn('number', 'Kutsatze tasa: Positiboak zati egindako probak (%)');\n                    data.addColumn('number', 'Errenferentziazko tasa = %5');\n                    var options = {\n                        chart: {\n                            title: 'Kutsatze tasa: Kasu positiboak egindako proben arabera (%)',\n                            subtitle: 'Kasu positiboak zati egindako testak (PCR eta antigeno probak) Euskadin.',\n                        },\n                        hAxis: { format: 'yy/M/d' },\n                        width: 900,\n                        height: 500\n                    };\n                } else {\n                    data.addColumn('date', 'Fecha');\n                    data.addColumn('number', 'Tasa de positividad: Positivos entre los test totales realizados (%)');\n                    data.addColumn('number', 'Tasa de referencia = 5%');\n                    var options = {\n                        chart: {\n                            title: 'Tasa de Positividad: Positivos en función de los test totales realizados (%)',\n                            subtitle: 'Casos positivos entre las pruebas (PCR y antígenos) realizadas en Euskadi.',\n                        },\n                        hAxis: { format: 'd/M/yy' },\n                        width: 900,\n                        height: 500\n                    };\n                }\n                var positivesPcrRate = [];\n                let previousPositives;\n                let previousPcr;\n                for (i = 0; i < dataJson.byDate.length; i++) {\n                    positivesPcrRate.push({ date: dataJson.byDate[i].date, positives: dataJson.byDate[i].pcrPositiveCount, pcr: dataJson.byDate[i].pcrTestCount, rate: (((dataJson.byDate[i].pcrPositiveCount) - previousPositives) / ((dataJson.byDate[i].pcrTestCount) - previousPcr)) * 100 });\n                    previousPositives = dataJson.byDate[i].pcrPositiveCount;\n                    previousPcr = dataJson.byDate[i].pcrTestCount;\n                }\n                for (let element of positivesPcrRate) {\n                    if (element.date > '2020-04-25T22:00:00Z' && element.rate > 0) {\n                        data.addRow([new Date(element.date), element.rate, 5]);\n                    }\n                }\n                var chart = new google.charts.Line(document.getElementById('linechart_material1'));\n                chart.draw(data, google.charts.Line.convertOptions(options));\n            }\n        }\n\n    });\n\n}"]}