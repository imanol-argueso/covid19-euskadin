{"version":3,"sources":["js/config.js","js/getData.js","js/fallecidos.js"],"names":["DATA_SOURCE","DATAFILES","EPIDEMICSTATUS","PCR","DECEASEDPEOPLECOUNT","BYAGE","BYHEALTHZONE","BYMUNICIPALITY","BYHOSPITAL","getJSON","url","callback","xhr","XMLHttpRequest","open","responseType","onload","status","response","send","window","err","dataRawJson","alert","console","log","JSON","parse","stringify","dataJson","google","charts","load","setOnLoadCallback","drawChart","data","visualization","DataTable","addColumn","element","byDate","addRow","Date","date","deceasedCount","options","chart","title","hAxis","format","width","height","Line","document","getElementById","draw","convertOptions","drawTable","table","Table","showRowNumber","sortColumn","sortAscending"],"mappings":";;AEAA;;AACA;;AFDA,AEGAoB,MFHMpB,AEGA,CAACgB,MAAP,GAAgB,CFHC,GAAG,QEGQ,wFFH5B;AAEO,AEEH,ADJG,IAAIP,EDEER,KCFK,GAAG,CDEC,GAAG,MEEbA,ADJmBS,GAAV,EAAeC,QAAf,EAAyB,GCIxBP,mBAAlB,EAAuC,UAAUiB,GAAV,EAAeC,WAAf,EAA4B;AFDnEpB,AEEI,ADJJ,EDEAA,ICFIU,ECIIS,CDJD,ECII,CDJD,GCIK,CFFD,ACFAR,EDEG,CEEb,EFFeb,AEEE,SDJX,EDEqB,ACF/B,+BDCqB;AAErBG,AEEQoB,ADJRX,EDEAT,ACFAS,GDEG,ACFA,CCIKW,ADJJT,CDEE,GAAEd,ACFR,CCIa,ADJJ,CCIK,IDJd,EAAgBU,GDEI,ACFpB,EAAqB,IAArB,YCIyCW,CFJpB,EEIR,CAAL;AFDRjB,AEEK,ADJLQ,EDEAR,ACFAQ,GCEI,ADFD,CAACG,KCIO,ODJX,GDEmB,ACFA,EDEG,GAAEf,CCFxB,UDEoC,mCAHf;AAIrBK,AEEQmB,EFFRnB,IEEQmB,CFFH,EAAG,GAAExB,CEEK,CAACyB,GAAR,CAAYC,IAAI,CFFF,AEEGC,KAAL,CAAWD,IAAI,CAACE,SAAL,CFNV,AEMyBN,WAAf,CAAX,CAAZ;AFDRhB,AEEQ,ADLRM,EDGAN,ACHAM,GAAG,CAACI,ICKQa,EDLZ,EDGY,CCHC,CDGE,EEEK,CFFH7B,EEEM0B,IAAI,CAACC,CDLH,GDGI,CEEN,CAAWD,IAAI,CAACE,SAAL,CAAeN,WFP5B,AEOa,CAAX,CAAf;AFDRf,AEEQuB,ADLJ,EDGJvB,IEEQuB,EDLAb,ICKM,CAACc,CDLD,EDGA,CCHGnB,CDGA,CEET,CAAcoB,ADLF,CDGDhC,ACHEiB,GCKb,CAAmB,EDLvB,KDG2B,EEEvB,EAA8B,0BFRjB;AAOrBT,AECwC,EFDxCA,UAAU,EAAG,GAAER,GECqC,CAAC,MAAD,CFDzB;AAPN,AEQiB,ADJlC,CDJD,MEQK,CDJAiB,MAAM,IAAI,GAAd,EAAmB;ACKfa,ADJAnB,MCIAmB,ADJAnB,MCIM,CAACoB,CDJC,CAAC,ICIT,ADJQ,CCIME,CDJCrB,GAAG,CAACM,QAAX,CAAR,GCIA,CAAgCgB,SAAhC;ADHH,KAFD,MAEO;ACKH,ADJAvB,MAAAA,QAAQ,CCICuB,ADJAjB,MAAD,CAAR,ECIA,GAAqB;AACjB,ADJP,YCIWkB,IAAI,GAAG,IAAIL,MAAM,CAACM,aAAP,CAAqBC,SAAzB,EAAX;AACAF,ADJX,GAPD,KCWYA,IAAI,CAACG,SAAL,CAAe,MAAf,EAAuB,OAAvB;AACAH,QAAAA,IAAI,CAACG,SAAL,CAAe,QAAf,EAAyB,sBAAzB;ADJZ1B,EAAAA,GAAG,CAACO,IAAJ;ACKY,ADJf,CAbM,YCiBc,IAAIoB,OAAT,IAAoBV,QAAQ,CAACW,MAA7B,EAAqC;AACjCL,UAAAA,IAAI,CAACM,MAAL,CAAY,CAAC,IAAIC,IAAJ,CAASH,OAAO,CAACI,IAAjB,CAAD,EAAyBJ,OAAO,CAACK,aAAjC,CAAZ;AACH;;AACD,YAAIC,OAAO,GAAG;AACVC,UAAAA,KAAK,EAAE;AACHC,YAAAA,KAAK,EAAE,iCADJ,CAEH;;AAFG,WADG;AAKVC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,MAAM,EAAE;AAAV,WALG;AAMVC,UAAAA,KAAK,EAAE,GANG;AAOVC,UAAAA,MAAM,EAAE;AAPE,SAAd;AASA,YAAIL,KAAK,GAAG,IAAIhB,MAAM,CAACC,MAAP,CAAcqB,IAAlB,CAAuBC,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,CAAvB,CAAZ;AACAR,QAAAA,KAAK,CAACS,IAAN,CAAWpB,IAAX,EAAiBL,MAAM,CAACC,MAAP,CAAcqB,IAAd,CAAmBI,cAAnB,CAAkCX,OAAlC,CAAjB;AACH;;AACDf,MAAAA,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB,SAAnB,EAA8B;AAAE,oBAAY,CAAC,OAAD;AAAd,OAA9B;AACAF,MAAAA,MAAM,CAACC,MAAP,CAAcE,iBAAd,CAAgCwB,SAAhC;;AACA,eAASA,SAAT,GAAqB;AACjB,YAAItB,IAAI,GAAG,IAAIL,MAAM,CAACM,aAAP,CAAqBC,SAAzB,EAAX;AACAF,QAAAA,IAAI,CAACG,SAAL,CAAe,MAAf,EAAuB,OAAvB;AACAH,QAAAA,IAAI,CAACG,SAAL,CAAe,QAAf,EAAyB,YAAzB;;AAEA,aAAK,IAAIC,OAAT,IAAoBV,QAAQ,CAACW,MAA7B,EAAqC;AACjCL,UAAAA,IAAI,CAACM,MAAL,CAAY,CAAC,IAAIC,IAAJ,CAASH,OAAO,CAACI,IAAjB,CAAD,EAAyBJ,OAAO,CAACK,aAAjC,CAAZ;AACH;;AACD,YAAIc,KAAK,GAAG,IAAI5B,MAAM,CAACM,aAAP,CAAqBuB,KAAzB,CAA+BN,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAA/B,CAAZ;AACAI,QAAAA,KAAK,CAACH,IAAN,CAAWpB,IAAX,EAAiB;AAAEyB,UAAAA,aAAa,EAAE,IAAjB;AAAuBC,UAAAA,UAAU,EAAE,CAAnC;AAAsCC,UAAAA,aAAa,EAAE,KAArD;AAA4DZ,UAAAA,KAAK,EAAE,MAAnE;AAA2EC,UAAAA,MAAM,EAAE;AAAnF,SAAjB;AACH;AAEJ;AACJ,GA3CD;AA4CH,CA7CD","file":"fallecidos.62055501.js","sourceRoot":"..\\src\\covid19","sourcesContent":["const DATA_SOURCE = 'https://opendata.euskadi.eus/contenidos/ds_informes_estudios/covid_19_2020/opendata/generated/';\n\nexport const DATAFILES = {\n    EPIDEMICSTATUS: `${DATA_SOURCE}/covid19-epidemic-status.json`,\n    PCR: `${DATA_SOURCE}/covid19-pcr.json`,\n    DECEASEDPEOPLECOUNT: `${DATA_SOURCE}/covid19-deceasedPeopleCount.json`,\n    BYAGE: `${DATA_SOURCE}/covid19-byage.json`,\n    BYHEALTHZONE: `${DATA_SOURCE}/covid19-byhealthzone.json`,\n    BYMUNICIPALITY: `${DATA_SOURCE}/covid19-bymunicipality.json`,\n    BYHOSPITAL: `${DATA_SOURCE}/covid19-byhospital.json`,\n};\n","export var getJSON = function (url, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open('get', url, true);\r\n    xhr.responseType = 'json';\r\n    xhr.onload = function () {\r\n        var status = xhr.status;\r\n        if (status == 200) {\r\n            callback(null, xhr.response);\r\n        } else {\r\n            callback(status);\r\n        }\r\n    };\r\n    xhr.send();\r\n};","import { DATAFILES } from './config';\r\nimport { getJSON } from './getData.js';\r\n\r\nwindow.onload = function () {\r\n    getJSON(DATAFILES.DECEASEDPEOPLECOUNT, function (err, dataRawJson) {\r\n        if (err != null) {\r\n            alert('Something went wrong: ' + err);\r\n        } else {\r\n            console.log(JSON.parse(JSON.stringify(dataRawJson)));\r\n            var dataJson = JSON.parse(JSON.stringify(dataRawJson));\r\n            google.charts.load('current', { 'packages': ['line'] });\r\n            google.charts.setOnLoadCallback(drawChart);\r\n\r\n            function drawChart() {\r\n                var data = new google.visualization.DataTable();\r\n                data.addColumn('date', 'Fecha');\r\n                data.addColumn('number', 'Número de fallecidos');\r\n                for (let element of dataJson.byDate) {\r\n                    data.addRow([new Date(element.date), element.deceasedCount]);\r\n                }\r\n                var options = {\r\n                    chart: {\r\n                        title: 'Número de fallecidos en Euskadi',\r\n                        //subtitle: 'Casos positivos nuevos en Euskadi de test PCRs'\r\n                    },\r\n                    hAxis: { format: 'M/d/yy' },\r\n                    width: 900,\r\n                    height: 500\r\n                };\r\n                var chart = new google.charts.Line(document.getElementById('linechart_material2'));\r\n                chart.draw(data, google.charts.Line.convertOptions(options));\r\n            }\r\n            google.charts.load('current', { 'packages': ['table'] });\r\n            google.charts.setOnLoadCallback(drawTable);\r\n            function drawTable() {\r\n                var data = new google.visualization.DataTable();\r\n                data.addColumn('date', 'Fecha');\r\n                data.addColumn('number', 'Fallecidos');\r\n\r\n                for (let element of dataJson.byDate) {\r\n                    data.addRow([new Date(element.date), element.deceasedCount]);\r\n                }\r\n                var table = new google.visualization.Table(document.getElementById('table_div2'));\r\n                table.draw(data, { showRowNumber: true, sortColumn: 0, sortAscending: false, width: '100%', height: '100%' });\r\n            }\r\n\r\n        }\r\n    });\r\n}"]}