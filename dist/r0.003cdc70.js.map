{"version":3,"sources":["js/config.js","js/getData.js","js/r0.js"],"names":["DATA_SOURCE","DATAFILES","EPIDEMICSTATUS","PCR","DECEASEDPEOPLECOUNT","BYAGE","BYHEALTHZONE","BYMUNICIPALITY","BYHOSPITAL","getJSON","url","callback","xhr","XMLHttpRequest","open","responseType","onload","status","response","send","window","err","dataRawJson","alert","dataJson","JSON","parse","stringify","google","charts","load","setOnLoadCallback","drawChart","data","visualization","DataTable","addColumn","element","byDate","date","addRow","Date","r0","options","chart","title","subtitle","width","height","Line","document","getElementById","draw","convertOptions","drawTable","table","Table","showRowNumber","sortColumn","sortAscending"],"mappings":";;AEAA;;AACA;;AFDA,AEGAoB,MFHMpB,AEGA,CAACgB,MAAP,GAAgB,CFHC,GAAG,QEGQ,wFFH5B;AAEO,ACFA,ACIH,IDJOP,EDEER,KCFK,GAAG,CDEC,GAAG,MCFMS,ACInBT,GDJS,EAAeU,QAAf,EAAyB,GCIxBT,cAAlB,EAAkC,UAAUmB,GAAV,EAAeC,WAAf,EAA4B;AFD9DpB,ACFA,ACII,EFFJA,ICFIU,ECIIS,CDJD,ECII,CDJD,GCIK,CFFD,ACFAR,EDEG,CEEb,EFFeb,AEEE,SDJX,EDEqB,ACF/B,+BDCqB;AAErBG,ACFAS,ACIQW,EFFRpB,ACFAS,GDEG,ACFA,CAACE,ACIIS,CFFF,GAAEvB,ACFR,CAAS,ACII,CAAC,IDJd,EAAgBU,GDEI,ACFpB,EAAqB,IAArB,YCIyCW,CFJpB,EEIR,CAAL;AFDRjB,ACFAQ,ACIK,EFFLR,ACFAQ,GAAG,ACEC,CDFAG,KCIO,ODJX,GDEmB,ACFA,EDEG,GAAEf,CCFxB,UDEoC,mCAHf;AAIrBK,AEEQ,EFFRA,KAAK,EAAG,CEEImB,EFFFxB,MEEU,GAAGyB,EFFD,EEEK,CAACC,KAAL,CAAWD,IAAI,CAACE,OFNlB,EEMa,CAAeL,WAAf,CAAX,CAAf;AFDRhB,ACHAM,ACKQgB,EFFRtB,ACHAM,GAAG,CAACI,ACKIY,MDLR,ACKc,CAACC,CFFH,CCHC,CDGE,GAAE7B,AEET,CAAc8B,IAAd,CAAmB,EDLF,GDGI,IEErB,EAA8B,sBFPjB;AAMrBvB,ACHI,ACIoC,EFDxCA,MCHQU,MAAM,EDGA,CCHGL,CDGA,ECHG,ACIgC,CFDjCZ,ACHEiB,ACIgC,MDJjD,ACIgD,KFDrB,8BANV;AAOrBT,AEAsC,EFAtCA,KEAQ,KFAE,EAAG,GAAER,WAAY;AAPN,ACIjB,ACII4B,CFRL,KEQKA,EDJAX,ICIM,CAACY,CDJD,IAAI,CCIV,CAAcE,CDJlB,EAAmB,cCIf,CAAgCC,SAAhC;ADHArB,MAAAA,QAAQ,CAAC,IAAD,EAAOC,GAAG,CAACM,QAAX,CAAR;AACH,ACIG,KDNJ,MAEO,ICIMc,SAAT,GAAqB;ADHrBrB,ACII,MDJJA,MCIQsB,EDJA,CAAChB,CCIG,GAAG,EDJP,CAAR,CCImBW,MAAM,CAACM,aAAP,CAAqBC,SAAzB,EAAX;ADHP,ACIOF,QAAAA,IAAI,CAACG,SAAL,CAAe,MAAf,EAAuB,OAAvB;ADHX,ACIWH,GDXZ,KCWYA,IAAI,CAACG,SAAL,CAAe,QAAf,EAAyB,6BAAzB;;ADHZxB,ACIY,EDJZA,GAAG,CAACO,IAAJ,GCIiB,IAAIkB,OAAT,IAAoBb,QAAQ,CAACc,MAA7B,EAAqC;ADHpD,ACImB,CDjBb,aCiBiBD,OAAO,CAACE,IAAR,GAAe,sBAAnB,EAA2C;AACvCN,YAAAA,IAAI,CAACO,MAAL,CAAY,CAAC,IAAIC,IAAJ,CAASJ,OAAO,CAACE,IAAjB,CAAD,EAAyBF,OAAO,CAACK,EAAjC,CAAZ;AACH;AACJ;;AACD,YAAIC,OAAO,GAAG;AACVC,UAAAA,KAAK,EAAE;AACHC,YAAAA,KAAK,EAAE,mCADJ;AAEHC,YAAAA,QAAQ,EAAE;AAFP,WADG;AAKVC,UAAAA,KAAK,EAAE,GALG;AAMVC,UAAAA,MAAM,EAAE;AANE,SAAd;AAQA,YAAIJ,KAAK,GAAG,IAAIhB,MAAM,CAACC,MAAP,CAAcoB,IAAlB,CAAuBC,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,CAAvB,CAAZ;AACAP,QAAAA,KAAK,CAACQ,IAAN,CAAWnB,IAAX,EAAiBL,MAAM,CAACC,MAAP,CAAcoB,IAAd,CAAmBI,cAAnB,CAAkCV,OAAlC,CAAjB;AACH;;AACDf,MAAAA,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB,SAAnB,EAA8B;AAAE,oBAAY,CAAC,OAAD;AAAd,OAA9B;AACAF,MAAAA,MAAM,CAACC,MAAP,CAAcE,iBAAd,CAAgCuB,SAAhC;;AACA,eAASA,SAAT,GAAqB;AACjB,YAAIrB,IAAI,GAAG,IAAIL,MAAM,CAACM,aAAP,CAAqBC,SAAzB,EAAX;AACAF,QAAAA,IAAI,CAACG,SAAL,CAAe,MAAf,EAAuB,OAAvB;AACAH,QAAAA,IAAI,CAACG,SAAL,CAAe,QAAf,EAAyB,wBAAzB;;AAEA,aAAK,IAAIC,OAAT,IAAoBb,QAAQ,CAACc,MAA7B,EAAqC;AACjC,cAAID,OAAO,CAACE,IAAR,GAAe,sBAAnB,EAA2C;AACvCN,YAAAA,IAAI,CAACO,MAAL,CAAY,CAAC,IAAIC,IAAJ,CAASJ,OAAO,CAACE,IAAjB,CAAD,EAAyBF,OAAO,CAACK,EAAjC,CAAZ;AACH;AACJ;;AACD,YAAIa,KAAK,GAAG,IAAI3B,MAAM,CAACM,aAAP,CAAqBsB,KAAzB,CAA+BN,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAA/B,CAAZ;AACAI,QAAAA,KAAK,CAACH,IAAN,CAAWnB,IAAX,EAAiB;AAAEwB,UAAAA,aAAa,EAAE,IAAjB;AAAuBC,UAAAA,UAAU,EAAE,CAAnC;AAAsCC,UAAAA,aAAa,EAAE,KAArD;AAA4DZ,UAAAA,KAAK,EAAE,MAAnE;AAA2EC,UAAAA,MAAM,EAAE;AAAnF,SAAjB;AACH;AACJ;AACJ,GA5CD;AA6CH,CA9CD","file":"r0.003cdc70.js","sourceRoot":"..\\src\\covid19","sourcesContent":["const DATA_SOURCE = 'https://opendata.euskadi.eus/contenidos/ds_informes_estudios/covid_19_2020/opendata/generated/';\n\nexport const DATAFILES = {\n    EPIDEMICSTATUS: `${DATA_SOURCE}/covid19-epidemic-status.json`,\n    PCR: `${DATA_SOURCE}/covid19-pcr.json`,\n    DECEASEDPEOPLECOUNT: `${DATA_SOURCE}/covid19-deceasedPeopleCount.json`,\n    BYAGE: `${DATA_SOURCE}/covid19-byage.json`,\n    BYHEALTHZONE: `${DATA_SOURCE}/covid19-byhealthzone.json`,\n    BYMUNICIPALITY: `${DATA_SOURCE}/covid19-bymunicipality.json`,\n    BYHOSPITAL: `${DATA_SOURCE}/covid19-byhospital.json`,\n};\n","export var getJSON = function (url, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open('get', url, true);\r\n    xhr.responseType = 'json';\r\n    xhr.onload = function () {\r\n        var status = xhr.status;\r\n        if (status == 200) {\r\n            callback(null, xhr.response);\r\n        } else {\r\n            callback(status);\r\n        }\r\n    };\r\n    xhr.send();\r\n};","import { DATAFILES } from './config';\r\nimport { getJSON } from './getData.js';\r\n\r\nwindow.onload = function () {\r\n    getJSON(DATAFILES.EPIDEMICSTATUS, function (err, dataRawJson) {\r\n        if (err != null) {\r\n            alert('Something went wrong: ' + err);\r\n        } else {\r\n            var dataJson = JSON.parse(JSON.stringify(dataRawJson));\r\n            google.charts.load('current', { 'packages': ['line'] });\r\n            google.charts.setOnLoadCallback(drawChart);\r\n\r\n            function drawChart() {\r\n                var data = new google.visualization.DataTable();\r\n                data.addColumn('date', 'Fecha');\r\n                data.addColumn('number', 'Número de Reproducción (r0)');\r\n                for (let element of dataJson.byDate) {\r\n                    if (element.date > '2020-03-07T22:00:00Z') {\r\n                        data.addRow([new Date(element.date), element.r0]);\r\n                    }\r\n                }\r\n                var options = {\r\n                    chart: {\r\n                        title: 'Número de reproducción en Euskadi',\r\n                        subtitle: 'R0 de una enfermedad es el número de casos, en promedio, que van a ser causados por una persona infectada durante el período de contagio.'\r\n                    },\r\n                    width: 900,\r\n                    height: 500\r\n                };\r\n                var chart = new google.charts.Line(document.getElementById('linechart_material3'));\r\n                chart.draw(data, google.charts.Line.convertOptions(options));\r\n            }\r\n            google.charts.load('current', { 'packages': ['table'] });\r\n            google.charts.setOnLoadCallback(drawTable);\r\n            function drawTable() {\r\n                var data = new google.visualization.DataTable();\r\n                data.addColumn('date', 'Fecha');\r\n                data.addColumn('number', 'Número de reproducción');\r\n\r\n                for (let element of dataJson.byDate) {\r\n                    if (element.date > '2020-03-07T22:00:00Z') {\r\n                        data.addRow([new Date(element.date), element.r0]);\r\n                    }\r\n                }\r\n                var table = new google.visualization.Table(document.getElementById('table_div3'));\r\n                table.draw(data, { showRowNumber: true, sortColumn: 0, sortAscending: false, width: '100%', height: '100%' });\r\n            }\r\n        }\r\n    });\r\n}"]}